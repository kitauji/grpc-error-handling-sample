// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package greeter

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// GreeterClient is the client API for Greeter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GreeterClient interface {
	// Unary RPC
	SayHelloUN(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error)
	// Server streaming RPC
	SayHelloSS(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (Greeter_SayHelloSSClient, error)
	// Client streaming RPC
	SayHelloCS(ctx context.Context, opts ...grpc.CallOption) (Greeter_SayHelloCSClient, error)
	// Bidirectional streaming RPC
	// rpc SayHelloBI (stream HelloRequest) returns (stream HelloResponse) {}
	SayHelloBI(ctx context.Context, opts ...grpc.CallOption) (Greeter_SayHelloBIClient, error)
}

type greeterClient struct {
	cc grpc.ClientConnInterface
}

func NewGreeterClient(cc grpc.ClientConnInterface) GreeterClient {
	return &greeterClient{cc}
}

func (c *greeterClient) SayHelloUN(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error) {
	out := new(HelloResponse)
	err := c.cc.Invoke(ctx, "/greeter.Greeter/SayHelloUN", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greeterClient) SayHelloSS(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (Greeter_SayHelloSSClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Greeter_serviceDesc.Streams[0], "/greeter.Greeter/SayHelloSS", opts...)
	if err != nil {
		return nil, err
	}
	x := &greeterSayHelloSSClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Greeter_SayHelloSSClient interface {
	Recv() (*HelloResponse, error)
	grpc.ClientStream
}

type greeterSayHelloSSClient struct {
	grpc.ClientStream
}

func (x *greeterSayHelloSSClient) Recv() (*HelloResponse, error) {
	m := new(HelloResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *greeterClient) SayHelloCS(ctx context.Context, opts ...grpc.CallOption) (Greeter_SayHelloCSClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Greeter_serviceDesc.Streams[1], "/greeter.Greeter/SayHelloCS", opts...)
	if err != nil {
		return nil, err
	}
	x := &greeterSayHelloCSClient{stream}
	return x, nil
}

type Greeter_SayHelloCSClient interface {
	Send(*HelloRequest) error
	CloseAndRecv() (*HelloResponse, error)
	grpc.ClientStream
}

type greeterSayHelloCSClient struct {
	grpc.ClientStream
}

func (x *greeterSayHelloCSClient) Send(m *HelloRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *greeterSayHelloCSClient) CloseAndRecv() (*HelloResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(HelloResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *greeterClient) SayHelloBI(ctx context.Context, opts ...grpc.CallOption) (Greeter_SayHelloBIClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Greeter_serviceDesc.Streams[2], "/greeter.Greeter/SayHelloBI", opts...)
	if err != nil {
		return nil, err
	}
	x := &greeterSayHelloBIClient{stream}
	return x, nil
}

type Greeter_SayHelloBIClient interface {
	Send(*HelloRequest) error
	Recv() (*StreamingHelloResponse, error)
	grpc.ClientStream
}

type greeterSayHelloBIClient struct {
	grpc.ClientStream
}

func (x *greeterSayHelloBIClient) Send(m *HelloRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *greeterSayHelloBIClient) Recv() (*StreamingHelloResponse, error) {
	m := new(StreamingHelloResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GreeterServer is the server API for Greeter service.
// All implementations must embed UnimplementedGreeterServer
// for forward compatibility
type GreeterServer interface {
	// Unary RPC
	SayHelloUN(context.Context, *HelloRequest) (*HelloResponse, error)
	// Server streaming RPC
	SayHelloSS(*HelloRequest, Greeter_SayHelloSSServer) error
	// Client streaming RPC
	SayHelloCS(Greeter_SayHelloCSServer) error
	// Bidirectional streaming RPC
	// rpc SayHelloBI (stream HelloRequest) returns (stream HelloResponse) {}
	SayHelloBI(Greeter_SayHelloBIServer) error
	mustEmbedUnimplementedGreeterServer()
}

// UnimplementedGreeterServer must be embedded to have forward compatible implementations.
type UnimplementedGreeterServer struct {
}

func (UnimplementedGreeterServer) SayHelloUN(context.Context, *HelloRequest) (*HelloResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHelloUN not implemented")
}
func (UnimplementedGreeterServer) SayHelloSS(*HelloRequest, Greeter_SayHelloSSServer) error {
	return status.Errorf(codes.Unimplemented, "method SayHelloSS not implemented")
}
func (UnimplementedGreeterServer) SayHelloCS(Greeter_SayHelloCSServer) error {
	return status.Errorf(codes.Unimplemented, "method SayHelloCS not implemented")
}
func (UnimplementedGreeterServer) SayHelloBI(Greeter_SayHelloBIServer) error {
	return status.Errorf(codes.Unimplemented, "method SayHelloBI not implemented")
}
func (UnimplementedGreeterServer) mustEmbedUnimplementedGreeterServer() {}

// UnsafeGreeterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GreeterServer will
// result in compilation errors.
type UnsafeGreeterServer interface {
	mustEmbedUnimplementedGreeterServer()
}

func RegisterGreeterServer(s grpc.ServiceRegistrar, srv GreeterServer) {
	s.RegisterService(&_Greeter_serviceDesc, srv)
}

func _Greeter_SayHelloUN_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).SayHelloUN(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/greeter.Greeter/SayHelloUN",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).SayHelloUN(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Greeter_SayHelloSS_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(HelloRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GreeterServer).SayHelloSS(m, &greeterSayHelloSSServer{stream})
}

type Greeter_SayHelloSSServer interface {
	Send(*HelloResponse) error
	grpc.ServerStream
}

type greeterSayHelloSSServer struct {
	grpc.ServerStream
}

func (x *greeterSayHelloSSServer) Send(m *HelloResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Greeter_SayHelloCS_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GreeterServer).SayHelloCS(&greeterSayHelloCSServer{stream})
}

type Greeter_SayHelloCSServer interface {
	SendAndClose(*HelloResponse) error
	Recv() (*HelloRequest, error)
	grpc.ServerStream
}

type greeterSayHelloCSServer struct {
	grpc.ServerStream
}

func (x *greeterSayHelloCSServer) SendAndClose(m *HelloResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *greeterSayHelloCSServer) Recv() (*HelloRequest, error) {
	m := new(HelloRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Greeter_SayHelloBI_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GreeterServer).SayHelloBI(&greeterSayHelloBIServer{stream})
}

type Greeter_SayHelloBIServer interface {
	Send(*StreamingHelloResponse) error
	Recv() (*HelloRequest, error)
	grpc.ServerStream
}

type greeterSayHelloBIServer struct {
	grpc.ServerStream
}

func (x *greeterSayHelloBIServer) Send(m *StreamingHelloResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *greeterSayHelloBIServer) Recv() (*HelloRequest, error) {
	m := new(HelloRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Greeter_serviceDesc = grpc.ServiceDesc{
	ServiceName: "greeter.Greeter",
	HandlerType: (*GreeterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHelloUN",
			Handler:    _Greeter_SayHelloUN_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SayHelloSS",
			Handler:       _Greeter_SayHelloSS_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SayHelloCS",
			Handler:       _Greeter_SayHelloCS_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "SayHelloBI",
			Handler:       _Greeter_SayHelloBI_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "greeter.proto",
}
